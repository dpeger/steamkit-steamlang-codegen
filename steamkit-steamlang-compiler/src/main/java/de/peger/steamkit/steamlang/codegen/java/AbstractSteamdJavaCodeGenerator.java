package de.peger.steamkit.steamlang.codegen.java;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import javax.annotation.Generated;

import com.helger.jcodemodel.JCodeModel;
import com.helger.jcodemodel.JDefinedClass;

import de.peger.steamkit.steamlang.codegen.SteamdCodeGenContext;

/**
 * @author dpeger
 *
 */
public abstract class AbstractSteamdJavaCodeGenerator {

    /**
     * Key for the {@linkplain SteamdCodeGenContext#getExtraSetting(String)
     * extra settings entry} holding the {@link JCodeModel} of the current code
     * generation.
     */
    public static final String SETTING_CODE_MODEL = "SETTING_CODE_MODEL";

    public static final String SETTING_ENUM_TYPES = "SETTING_ENUM_TYPES";

    private final SteamdCodeGenContext mContext;

    private final String mSourceName;

    protected AbstractSteamdJavaCodeGenerator(final String pSourceName, final SteamdCodeGenContext pContext) {
        mSourceName = pSourceName;
        mContext = pContext;
        createModel(mContext);
        createEnumTypeMapping(mContext);
    }

    private JCodeModel createModel(final SteamdCodeGenContext pContext) {
        return Optional.ofNullable(getModel()).orElseGet(() -> {
            final JCodeModel tCodeModel = new JCodeModel();
            setModel(tCodeModel);
            return tCodeModel;
        });
    }

    private Map<String, String> createEnumTypeMapping(final SteamdCodeGenContext pContext) {
        return Optional.ofNullable(getEnumTypes()).orElseGet(() -> {
            setEnumTypes(new HashMap<String, String>());
            return getEnumTypes();
        });
    }

    /**
     * @return the context
     */
    protected SteamdCodeGenContext getContext() {
        return mContext;
    }

    /**
     * @return The Java code model
     */
    protected JCodeModel getModel() {
        return (JCodeModel) mContext.getExtraSetting(SETTING_CODE_MODEL);
    }

    /**
     * @param pModel
     *            The Java code model
     */
    protected void setModel(final JCodeModel pModel) {
        mContext.addExtraSetting(SETTING_CODE_MODEL, pModel);
    }

    /**
     * @return Enum to type mapping
     */
    @SuppressWarnings("unchecked")
    protected Map<String, String> getEnumTypes() {
        return (Map<String, String>) mContext.getExtraSetting(SETTING_ENUM_TYPES);
    }

    /**
     * @param pModel
     *            Enum to type mapping
     */
    protected void setEnumTypes(final Map<String, String> pEnumTypes) {
        mContext.addExtraSetting(SETTING_ENUM_TYPES, pEnumTypes);
    }

    protected void generateClassHeader(final JDefinedClass pJClass) {

        pJClass.headerComment().setSingleLineMode(true)
                .append("Generated by the steam language compiler.  DO NOT EDIT!\n").append("source: '")
                .append(mSourceName).append("'");
        pJClass.annotate(Generated.class).param("value", SteamdJavaCodeGenerator.class.getCanonicalName());
    }

}
